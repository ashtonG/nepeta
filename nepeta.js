// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    return $.fn.filtermenu = function(opts) {
      var settings, table;
      settings = $.extend({
        columns: [1],
        bodyId: "",
        bodyIndex: 0,
        headIndex: 0,
        resetValue: "##FILTERMENU.RESET##",
        curFilters: [],
        headerSelect: false
      }, opts);
      table = this;
      $.each(settings.columns, function(index, curCol) {
        var body, buildSelect, col, firstRun, head, headerText, rebuild, select, stripToNumber, unfiltered;
        body = table.find("tbody" + settings.bodyId).eq(settings.bodyIndex);
        head = table.find("thead").eq(settings.headIndex);
        select = $("<select/>", {
          "class": "filter"
        });
        col = ":nth-child(" + curCol + ")";
        firstRun = true;
        headerText = head.find("tr>*" + selector).text();
        stripToNumber = function(str) {
          return str.replace(/\D/g, "");
        };
        unfiltered = function(cCol) {
          var flag;
          flag = true;
          $.each(settings.curFilters, function(index, item) {
            return flag = item.column !== cCol;
          });
          return flag;
        };
        buildSelect = function(selector) {
          var box, firstOpt, intCol, itemsArray;
          intCol = stripToNumber(selector);
          itemsArray = [];
          head.find("tr>*" + selector).find("select").detach();
          box = select.clone(true);
          box.addClass("FilterColumn_" + intCol);
          body.find("tr>td" + selector).filter(":visible").each(function() {
            if (firstRun) {
              $(this).addClass("FilterColumn_" + curCol);
            }
            return itemsArray.push($(this).text());
          });
          firstRun = false;
          firstOpt = $("<option />", {
            value: settings.resetValue,
            text: settings.headerSelect ? head.find("tr>*" + selector).text() : "Choose Filter"
          });
          box.append(firstOpt);
          itemsArray = $.grep(itemsArray, function(el, index) {
            return index === $.inArray(el, itemsArray);
          });
          $.each(itemsArray, function(index, item) {
            var curOpt;
            curOpt = $("<option />", {
              value: item
            });
            if (($.trim(item) != null) && $.trim(item) !== "") {
              curOpt.text(item);
            } else {
              curOpt.text("None");
            }
            return box.append(curOpt);
          });
          return head.find("tr>*" + selector).each(function() {
            var selectBox;
            selectBox = box.clone(true);
            if (settings.headerSelect) {
              $(this).empty();
            }
            return $(this).append(selectBox);
          });
        };
        rebuild = function(x) {
          return $.each($("select.filter").filter(":visible"), function(index, item) {
            return buildSelect(":nth-child(" + (stripToNumber($(item).attr("class"))) + ")");
          });
        };
        select.change(function(evt) {
          var cColumn, chk, clearLink, sBox, selector;
          sBox = $(this);
          chk = sBox.val();
          cColumn = stripToNumber(sBox.attr("class"));
          selector = ":nth-child(" + cColumn + ")";
          sBox.hide();
          if (chk !== settings.resetValue) {
            settings.curFilters.push({
              column: cColumn,
              value: chk
            });
            body.find("tr").filter(":visible").filter(function(i) {
              return $(this).find("td" + selector).text() !== chk;
            }).hide();
            clearLink = $("<a>", {
              text: "(" + ($.trim(chk) !== "" ? $.trim(chk) : "None") + ")",
              "class": "{\"column\": \"" + cColumn + "\", \"value\":\"" + ($.trim(chk)) + "\"}"
            });
            clearLink.css({
              display: "block"
            });
            clearLink.click(function() {
              var filterObj;
              filterObj = $.parseJSON($(this).attr("class"));
              $(this).remove();
              sBox.prop("selectedIndex", 0);
              settings.curFilters = $.grep(settings.curFilters, function(el, index) {
                return el.column !== filterObj.column;
              });
              if (settings.curFilters.length !== 0) {
                body.find("tr").filter(":hidden").filter(function(i) {
                  var match, row;
                  match = false;
                  row = $(this);
                  $.each(settings.curFilters, function(index, item) {
                    return match = $.trim(row.find("td:nth-child(" + item.column + ")").text()) === $.trim(item.value);
                  });
                  return match;
                }).show();
              } else {
                body.find("tr").filter(":hidden").show();
              }
              rebuild(0);
              return sBox.show();
            });
            clearLink.clone(true).appendTo(sBox.parent());
            return rebuild(0);
          }
        });
        return buildSelect(col);
      });
      return table;
    };
  })(jQuery);

}).call(this);
