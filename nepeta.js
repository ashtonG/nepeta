// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    return $.fn.filtermenu = function(opts) {
      var settings, table;
      settings = $.extend({
        columns: [1],
        bodyId: "",
        bodyIndex: 0,
        headIndex: 0,
        resetValue: "##FILTERMENU.RESET##",
        curFilters: []
      }, opts);
      table = this;
      $.each(settings.columns, function(index, curCol) {
        var body, buildSelect, col, firstRun, head, rebuild, select;
        body = table.find("tbody" + settings.bodyId).eq(settings.bodyIndex);
        head = table.find("thead").eq(settings.headIndex);
        select = $("<select/>");
        col = ":nth-child(" + curCol + ")";
        firstRun = true;
        /*
              unfiltered = (cCol) ->
                truthArray = []
                $.each settings.curFilters, (index, item) ->
                  truthArray.push item.column is cCol
                $.inArray true, truthArray
        */

        buildSelect = function(selector) {
          var box, firstOpt, intCol, itemsArray;
          intCol = selector.replace(/\D/g, "");
          itemsArray = [];
          box = head.find("tr>*" + selector).find("select");
          console.log("building for " + intCol);
          if (box.length === 0) {
            box = select.clone(true);
          } else {
            box.detach();
            box = select.clone(true);
          }
          box.addClass("FilterColumn_" + intCol);
          body.find("tr>td" + selector).filter(":visible").each(function() {
            if (firstRun) {
              $(this).addClass("FilterColumn_" + curCol);
            }
            return itemsArray.push($(this).text());
          });
          firstRun = false;
          firstOpt = $("<option />", {
            value: settings.resetValue,
            text: "Choose Filter"
            /*
                    if unfiltered intCol
                      firstOpt.text "Choose Filter"
                    else
                      firstOpt.text "Remove Filter"
            */

          });
          box.append(firstOpt);
          itemsArray = $.grep(itemsArray, function(el, index) {
            return index === $.inArray(el, itemsArray);
          });
          $.each(itemsArray, function(index, item) {
            var curOpt;
            curOpt = $("<option />", {
              value: item
            });
            if (($.trim(item) != null) && $.trim(item) !== "") {
              curOpt.text(item);
            } else {
              curOpt.text("None");
            }
            return box.append(curOpt);
          });
          box.prop("selectedIndex", 1);
          return head.find("tr>*" + selector).each(function() {
            var selectBox;
            selectBox = box.clone(true);
            return $(this).append(selectBox);
          });
        };
        rebuild = function(c) {
          return $.each($.grep(settings.columns, function(el, index) {
            return el !== c;
          }), function(index, item) {
            return buildSelect(":nth-child(" + item + ")");
          });
        };
        select.change(function(evt) {
          var cColumn, chk, clearLink, sBox, selector;
          console.log($(this));
          console.log(this);
          sBox = $(this);
          chk = sBox.val();
          cColumn = sBox.attr("class").replace(/\D/g, "");
          selector = ":nth-child(" + cColumn + ")";
          $(this).hide();
          if (chk !== settings.resetValue) {
            settings.curFilters.push({
              column: cColumn,
              value: chk
            });
            body.find("tr").filter(":visible").filter(function(i) {
              return $(this).find("td" + selector).text() !== chk;
            }).hide();
            clearLink = $("<a>", {
              href: "#",
              text: "X"
            });
            clearLink.click(function() {
              $(this).detatch();
              settings.curFilters = $.grep(settings.curFilters, function(el, index) {
                return el.column !== cColumn;
              });
              return head.find("tr>*" + selector).each(function() {
                return $(this).append(sBox);
              });
            });
            return rebuild(cColumn);
          }
        });
        return buildSelect(col);
      });
      return this;
    };
  })(jQuery);

}).call(this);
